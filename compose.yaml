x-log-volume: &log-volume
  logs:/var/log

services:
  archive:
    build: ./archive
    ports:
      - "8001:8000"
    depends_on:
      - postgres
    environment:
      LOG_FILE: /var/log/archive.log
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
    - *log-volume

  blog:
    build: ./blog
    ports:
      - "8002:8000"
    depends_on:
      - postgres
    environment:
      LOG_FILE: /var/log/blog.log
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      SECRET_KEY:
    volumes:
    - *log-volume

  # nepenthes:
  #   build: ./nepenthes
  #   ports:
  #     - "8003:8000"

  paste:
    build: ./paste
    ports:
      - "8004:8000"
    depends_on:
      - redis
    environment:
      LOG_FILE: /var/log/paste.log
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
    - *log-volume

  cdn:
    build: ./cdn
    ports:
      - "8007:8000"
    volumes:
      - cdn:/app/data

  webhooks:
    build: ./webhooks
    ports:
      - "8008:8000"
    depends_on:
      - postgres
    environment:
      LOG_FILE: /var/log/webhooks.log
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
    - *log-volume

  dwmun_frontend:
    build: ./dwmun25/frontend
    ports:
      - "8005:3000"

  concursus_frontend:
    build: ./concursus/frontend
    ports:
      - "8006:3000"

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes

  postgres:
    image: postgres:alpine
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB:
      POSTGRES_USER:
      POSTGRES_PASSWORD:
    volumes:
      - postgres:/var/lib/postgresql/data

  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: always
    networks:
      - portainer_network

  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki.yaml:/mnt/config/loki.yaml
      - ./loki-data:/mnt/loki
    command: -config.file=/mnt/config/loki.yaml
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:3.0.0
    container_name: promtail
    restart: unless-stopped
    volumes:
      - *log-volume
      - ./config/promtail.yaml:/mnt/config/promtail.yaml
    command: -config.file=/mnt/config/promtail.yaml
    depends_on:
      - loki
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD:
    depends_on:
      - loki
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    pid: "host"
    ports:
      - "9100:9100"
    command:
      - --path.rootfs=/host
      - --web.listen-address=:9100
      - --web.telemetry-path=/metrics
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring

volumes:
  postgres:
  portainer_data:
  cdn:
  grafana-storage:
  logs:

networks:
  portainer_network:
    driver: bridge
    name: portainer_network
  monitoring:
    driver: bridge
    name: monitoring
